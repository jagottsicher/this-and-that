#include <stdio.h>
#include <stdlib.h>
#include <locale.h>

// some little helpers
# define hideCursor() printf("\e[?25l")
# define showCursor() printf("\e[?25h")
# define clear() printf("\033[H\033[J")

// # define WIDE_ORIENTED 1

int msleep(long tms);

int main()
{
setlocale(LC_ALL, "");
// fwide( stdout, WIDE_ORIENTED );

char percentage[21][4][4] = {{"   ","   ","   ","  0"},
                                {" ▐ ","   ","   ","  5"},
                                {" ▐▌","   ","   "," 10"},
                                {" ▐▛","   ","   "," 15"},
                                {" ▐█","   ","   "," 20"},
                                {" ▐█","  ▀","   "," 25"},
                                {" ▐█","  █","   "," 30"},
                                {" ▐█","  █","  ▀"," 35"},
                                {" ▐█","  █","  ▜"," 40"},
                                {" ▐█","  █","  █"," 45"},
                                {" ▐█","  █"," ▐█"," 50"},
                                {" ▐█","  █"," ██"," 55"},
                                {" ▐█","  █","▐██"," 60"},
                                {" ▐█","  █","▟██"," 65"},
                                {" ▐█","  █","███"," 70"},
                                {" ▐█","▄ █","███"," 75"},
                                {" ▐█","█ █","███"," 80"},
                                {"▄▐█","█ █","███"," 85"},
                                {"▙▐█","█ █","███"," 90"},
                                {"█▐█","█ █","███"," 95"},
                                {"███","█ █","███","100"}};

char percentageUpwards[10] = {" ▁▂▃▄▅▆▇██"};

char percentageSidewards[20][2] = {"  ","▏ ","▎ ","▍ ","▌ ","▌ ","▋ ","▊ ","█ ","▉ ","▉▏","▉▎","▉▍","▉▌","▉▌","▉▋","▉▊","▉█","▉▉","▉▉"};


// does already nor work :-/
    clear();
    int counter = 0;
    for (int i = 0 ; i <= 100 ; i++) {
    //printf("%d %d\n", (i), (i % 5));
        if ((i % 5) == 0) {
            clear();
            printf("%s\n",percentage[counter][0]);
            printf("%s\n",percentage[counter][1]);
            printf("%s\n",percentage[counter][2]);
            printf("%s\n",percentage[counter][3]);
            msleep(500); // nappy for easier following
            counter++;
        }
    }

// only a percentage display going upwards
    counter = 0;
    for (int i = 0 ; i <= 100 ; i++) {
        if ((i % 11) == 0) {
            clear();
            printf("%c\n", percentageUpwards[counter]);
            msleep(500); // nappy for easier following
            counter++;
        }
    }

// only a percentage display going upwards
    counter = 0;
    for (int i = 0 ; i <= 100 ; i++) {
        if ((i % 11) == 0) {
            clear();
            printf("%s\n", percentageSidewards[counter]);
            msleep(500); // nappy for easier following
            counter++;
        }
    }


    return 0;
}



// have a nap in 1/1000th of a second steps
int msleep(long tms)
{
    struct timespec ts;
    int ret;
    if (tms < 0) {
        return -1;
    }
    ts.tv_sec = tms / 1000;
    ts.tv_nsec = (tms % 1000) * 1000000;
    do {
        ret = nanosleep(&ts, &ts);
    }
    while (ret);
    return ret;
}
