#include <stdio.h>
#include <stdlib.h>

#include "../../needful-things/needful-things.h"

struct Spot {
    char terrain;
    struct Spot *left;
    struct Spot *right;
    struct Spot *up;
    struct Spot *down;
};

int main() {
    struct Spot aRow[1000]; // = { {'A', &aRow[1] }, {'B', &aRow[2] },{'C', &aRow[3] },{'D', &aRow[4] },{'E', &aRow[5] },{'V', &aRow[6] },{'W', &aRow[7] },{'X', &aRow[8] },{'Y', &aRow[9] },{'Z', &aRow[0] },};

    // fill a 1000 members line and connect the end with the beginning
    for (int i = 0; i < 1000 ; i++) {
        aRow[i].terrain = randomNumber(65,90);
        aRow[i].right = &aRow[i+1];
        aRow[i].left = &aRow[999-i];
    }
    aRow[999].right = &aRow[0];
    aRow[0].left = &aRow[999];

    // output
    struct Spot *currentX;
    currentX = aRow;
    int j = 0;

//    do {
//    clearScreen();
//    currentX = &aRow[j];
//        for (int i = 0; i < checkAndSetConsoleDimensions('x'); i++) {
//            putc(currentX->terrain, stdout);
//            currentX = currentX->right;
//        }
//    fflush(stdout);
//    printf("\n Size of struct: %d, Number: %d",sizeof(struct Spot), j);
//    fflush(stdout);
////    if ((j > 995) || (j < 5))
////        msleep(1000);
//    j++;
//    if (j == 1000)
//        j = 0;
//    } while (j <= 999);

    do {
    clearScreen();
    currentX = &aRow[j];
        for (int i = 0; i < checkAndSetConsoleDimensions('x'); i++) {
            putc(currentX->terrain, stdout);
            currentX = currentX->right;
        }
    fflush(stdout);
    printf("\n Size of struct: %d, Number: %d",sizeof(struct Spot), j);
    fflush(stdout);
//    if ((j > 995) || (j < 5))
//        msleep(1000);
    j--;
    if (j == 1000)
        j = 0;
    } while (j <= 999);

    return 0;
}

