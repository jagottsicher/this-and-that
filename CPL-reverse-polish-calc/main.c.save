#include <stdio.h>
#include <stdlib.h>

#define MAXOP 100 // max size of operands/operators
#define NUMBER '0' // signals that number was found

int getop(char[]);
void push(double);
double pop(void);

// here we go
int main()
{
    int type;
    double op2;
    char s[MAXOP];
    while (( type = getop(s)) != EOF) {
        switch (type) {
        case NUMBER:
            push(atof(s));
            break;
        case '+':
            push(pop() + pop());
            break;
        case '*':
            push(pop() * pop());
            break;
        case '-':
            op2 = pop();
            push(pop() - op2);
            break;
        case '/':
            op2 = pop();
            if (op2 != 0.0)
                push(pop() / op2);
            else
            printf("Error: Division by zero");
        break;
        case '\n':
            printf("\t%.8g\n", pop());
            break;
        default:
            printf("Error: unknown command %s\n",s);
            break;
        }
    }

    return 0;
}

#define MAXVAL 100 // stack height

int sp = 0; // next free stackposition
double val[MAXVAL]; // value stack

// implementation push function
void push(double f) {
    if (sp < MAXVAL)
        val[sp++] = f;
    else
        printf("Error: Stack full, can't push %g\n", f);
}

// implementation pop function, pop and return the top value from the stack
double pop(void) {
    if (sp > 0)
        return val[--sp];
    else {
        printf("Error: stack is emtpy\n");
        return 0.0;
    }
}

#include <ctype.h>
int getch (void);
coid ungetch(int);

// get next operator or operand
int getop(char s[]) {
    int i, c;
    while ((s[0] = c = getch()) == ' ' || c == '\t')
        ;
        s[1] = '\0';
        if (!isdigit(c) && c != '.')
            return c; //because it is not a number
        i = 0;
        if (isdigit(c)) // get a number
            while (isdigit(s[++1]))
}
























